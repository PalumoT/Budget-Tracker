<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_44552_bt_budget</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Setup Budget</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	var duration = current.duration_month;
	var lastDay = new GlideDateTime();
	var forecast = current.planned / current.duration_month;
	
	for(var i=0; i<duration; i++){
		var start = new GlideDateTime(current.start_date);
		start.addMonthsUTC(i);
		var year = start.getYearUTC();
		var month = start.getMonthUTC();
		lastDay = getLastDayOfTheMonth(year, month);
		var period = start.getYearUTC() + " - " + getNameOfMonth(month - 1);
		
		
		var monthlyBudget = new GlideRecord("x_44552_bt_monthly_budget");
		monthlyBudget.addQuery("budget", current.sys_id);
		monthlyBudget.addQuery("period", period.toString());
		monthlyBudget.query();
		
		if(!monthlyBudget.next()){
			monthlyBudget.newRecord();
			monthlyBudget.start_date = start;
			monthlyBudget.end_date = lastDay;
			monthlyBudget.budget = current.sys_id;
			monthlyBudget.period = start.getYearUTC() + " - " + getNameOfMonth(month - 1);
		}

		monthlyBudget.forecast = parseFloat(forecast);
		monthlyBudget.update();
	}
	
	current.end_date = lastDay;
})(current, previous);

function getLastDayOfTheMonth(year, month){
	var lastDay = new Date(year, month, 0);
	return new GlideDateTime(year + "-" + month + "-" + lastDay.getDate());
}

function getNameOfMonth(month){
	var monthNames = ["January", "February", "March", "April", "May",
					  "June","July", "August", "September", "October",
					  "November", "December"];

	return monthNames[month];
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-02-10 10:57:09</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>63ff28ea0fb83200d92e85ace1050e0d</sys_id>
        <sys_mod_count>65</sys_mod_count>
        <sys_name>Setup Budget</sys_name>
        <sys_overrides/>
        <sys_package display_value="Budget Tracker" source="x_44552_bt">90861c1a0f743200d92e85ace1050ecc</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Budget Tracker">90861c1a0f743200d92e85ace1050ecc</sys_scope>
        <sys_update_name>sys_script_63ff28ea0fb83200d92e85ace1050e0d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-02-14 16:32:24</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=63ff28ea0fb83200d92e85ace1050e0d"/>
</record_update>
